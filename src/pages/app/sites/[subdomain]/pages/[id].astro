---
import { db, eq, and, Users, Sites, Pages } from "astro:db";
import Editor from "@/components/editor/novel"

const { subdomain, id } = Astro.params;

let user = ( await db.select().from(Users).where(eq(Users.id, 1)) )[0] //Get the user.id
let site = ( await db.select().from(Sites).where(and(eq(Sites.userId, user.id),eq(Sites.subdomain, subdomain))) )[0] //Get site.id

let page = await db.select().from(Pages).where(and(
  eq(Pages.id, id), //this is enough to get the page
  eq(Pages.siteId, site.id), //but this one verifies if we are talking about the same domain
  eq(Pages.userId, user.id), //and this one verifies if we are really right about the user
))
page = page[0]

if (!page) return new Response(null,{status: 404})

const title = "Edit "+page.title

//----------------------- INSERT PAGES
// if (Astro.request.method === 'POST') {
//   // parse form data
//   const formData = await Astro.request.formData();
//   const slug = formData.get('slug');
//   const title = formData.get('title');
//   const body = formData.get('body');
//   if (typeof slug === 'string' 
//     && typeof title === 'string'
//     && typeof body === 'string'
//   ) {
//     // insert form data into the Pages table
//     try{
//       const res = await db.update(Pages)
//       .set({slug, title, body })
//       .where(and(eq(Pages.id, id),eq(Pages.siteId, site.id),eq(Pages.userId, user.id))).returning({ updatedBody: Pages.body });
//       console.log(res)
//     } catch (e) {
//       console.log(e)
//     }
//   } else{
//     console.log("test failed")
//   }
// }

---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body class="prose max-w-screen-lg mx-auto">
		<h1>{title}</h1>

    <form method="POST" class="form-control mb-4 p-4 gap-4">

      <input id="title" name="title" class="input pl-0 text-3xl text-base-content font-semibold" value={page.title} />

      <div><label for="slug" set:html={`slug: ${subdomain}.rootdomain.com/`}></label><input id="slug" name="slug" class="input ml-2 pl-1" value={page.slug} /></div>
      
      <div id="editor-wrapper">

         <Editor initialValue={JSON.parse((JSON.parse(page.body))?.json)} client:load />

      </div>

      <button type="submit" class="btn btn-success">Save</button>

    </form>

	</body>
</html>
<script define:vars={{id}}>

// function messageHandler(e){console.log("hi",e)}
// document.addEventListener("editorUpdate", messageHandler);

let editorBody = window.localStorage.novel__content


  // const meuComponente = document.querySelector('#editor-wrapper');

  // meuComponente.addEventListener('click', (event) => {
  //   let dadosDoEvento = event;
  //   console.log('Evento capturado click no editor:', dadosDoEvento);
  // });
  // console.log(meuComponente)

  // document.querySelector('#editor-wrapper').addEventListener('editorUpdate', (event) => {
  //   const dadosDoEvento = event;
  //   console.log('editorUpdate:', dadosDoEvento);
  // });
  // meuComponente.addEventListener('editorUpdate', (event) => {
  //   const dadosDoEvento = event;
  //   console.log('editorUpdate', dadosDoEvento);
  // });

const BASE = "http://localhost:4321/api"

document.querySelector("form")?.addEventListener("submit", async (e) => {

  e.preventDefault()
  let formData = new FormData(e.currentTarget)
  formData.set("body", JSON.stringify({json: window.localStorage.novel__content, html: window.localStorage.novel__html}))

  const res = await fetch(`${BASE}/pages/${id}`,{
        method: "POST",
        body: formData
    })
    .then(res => {
        return res.json()
    })
    .catch(err => {
        console.error("Error on Update", err.message)
        return err
    })
    // .finally(()=>this.getPosts())

    //do something with the feedback
    console.log(res)

})

document.querySelector("#trash-it")?.addEventListener("click", async (e) => {
  e.preventDefault()
  let formData = new FormData(e.currentTarget)
  formData.set("isTrash", true) //Move to trash

  const res = await fetch(`${BASE}/pages/${id}`,{
      method: "POST",
      body: formData
  })
  .then(res => {
      return res.json()
  })
  .catch(err => {
      console.error("Error on Update", err.message)
      return err
  })
  // .finally(()=>this.getPosts())

  //do something with the feedback
  console.log(res)

})

</script>